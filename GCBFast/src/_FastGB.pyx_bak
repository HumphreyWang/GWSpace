#!/usr/bin/env python
#-*- coding: utf-8 -*-  
#==================================
# File Name: _FastGB.pyx
# Author: ekli
# Mail: lekf123@163.com
# Created Time: 2023-09-06 19:39:21
#==================================

import numpy as np
cimport numpy as np
from libc.stdlib cimport malloc, free

cdef extern from "GB.h":
    void Fast_GB(double *params, long N, double Tobs, double dt, 
            double *XLS, double *YLS, double *ZLS,
            double* XSL, double* YSL, double* ZSL, 
            int NP);

cdef void call_Fast_GB_test(double *params, int N, double Tobs, double dt,
        double *rXLS, double *rYLS, double *rZLS, 
        double *rXSL, double *rYSL, double *rZSL, int NP):
    #cdef double *XLS = <double *> malloc(N * sizeof(double))
    #cdef double *YLS = <double *> malloc(N * sizeof(double))
    #cdef double *ZLS = <double *> malloc(N * sizeof(double))
    #cdef double *XSL = <double *> malloc(N * sizeof(double))
    #cdef double *YSL = <double *> malloc(N * sizeof(double))
    #cdef double *ZSL = <double *> malloc(N * sizeof(double))
    #cdef double *XLS = NULL
    #cdef double *YLS = NULL
    #cdef double *ZLS = NULL
    #cdef double *XSL = NULL
    #cdef double *YSL = NULL
    #cdef double *ZSL = NULL

    cdef double f0  = params[0]
    cdef double df0 = params[1]
    cdef double lat = params[2]
    cdef double lng = params[3]
    cdef double Amp = params[4]
    cdef double iota = params[5]
    cdef double psi = params[6]
    cdef double phi0 = params[7]

    cdef double *c_params = <double *> malloc(NP * sizeof(double))

    #for i in range(len(params)):
    #    c_params[i] = params[i]
    c_params[0] = f0 * Tobs
    c_params[1] = np.cos(np.pi/2 - lat)
    c_params[2] = lng
    c_params[3] = np.log(Amp)
    c_params[4] = np.cos(iota)
    c_params[5] = psi
    c_params[6] = phi0
    c_params[7] = df0 * Tobs * Tobs
    #c_params[8] = 11./3 *df0*df0/f0 * Tobs*Tobs*Tobs

    Fast_GB(&c_params[0], N, Tobs, dt, &XLS[0], &YLS[0], &ZLS[0], &XSL[0], &YSL[0], &ZSL[0], NP)

    #rXLS = np.array([XLS[i] for i in range(N)])
    #rYLS = np.array([YLS[i] for i in range(N)])
    #rZLS = np.array([ZLS[i] for i in range(N)])
    #rXSL = np.array([XSL[i] for i in range(N)])
    #rYSL = np.array([YSL[i] for i in range(N)])
    #rZSL = np.array([ZSL[i] for i in range(N)])

    free(c_params)
    #free(XLS)
    #free(YLS)
    #free(ZLS)
    #free(XSL)
    #free(YSL)
    #free(ZSL)

    return #result_XLS, result_YLS, result_ZLS, result_XSL, result_YSL, result_ZSL

def call_Fast_GB(params, N, Tobs, dt, rXLS, rYLS, rZLS, rXSL, rYSL, rZSL):
    cdef double *XLS = <double *> malloc(N * sizeof(double))
    cdef double *YLS = <double *> malloc(N * sizeof(double))
    cdef double *ZLS = <double *> malloc(N * sizeof(double))
    cdef double *XSL = <double *> malloc(N * sizeof(double))
    cdef double *YSL = <double *> malloc(N * sizeof(double))
    cdef double *ZSL = <double *> malloc(N * sizeof(double))
    #cdef double *XLS = NULL
    #cdef double *YLS = NULL
    #cdef double *ZLS = NULL
    #cdef double *XSL = NULL
    #cdef double *YSL = NULL
    #cdef double *ZSL = NULL

    cdef double f0  = params[0]
    cdef double df0 = params[1]
    cdef double lat = params[2]
    cdef double lng = params[3]
    cdef double Amp = params[4]
    cdef double iota = params[5]
    cdef double psi = params[6]
    cdef double phi0 = params[7]

    cdef double *c_params = <double *> malloc(len(params) * sizeof(double))

    #for i in range(len(params)):
    #    c_params[i] = params[i]
    c_params[0] = f0 * Tobs
    c_params[1] = np.cos(np.pi/2 - lat)
    c_params[2] = lng
    c_params[3] = np.log(Amp)
    c_params[4] = np.cos(iota)
    c_params[5] = psi
    c_params[6] = phi0
    c_params[7] = df0 * Tobs * Tobs
    #c_params[8] = 11./3 *df0*df0/f0 * Tobs*Tobs*Tobs

    Fast_GB(c_params, N, Tobs, dt, XLS, YLS, ZLS, XSL, YSL, ZSL, len(params))

    rXLS = np.array([XLS[i] for i in range(N)])
    rYLS = np.array([YLS[i] for i in range(N)])
    rZLS = np.array([ZLS[i] for i in range(N)])
    rXSL = np.array([XSL[i] for i in range(N)])
    rYSL = np.array([YSL[i] for i in range(N)])
    rZSL = np.array([ZSL[i] for i in range(N)])

    free(c_params)
    free(XLS)
    free(YLS)
    free(ZLS)
    free(XSL)
    free(YSL)
    free(ZSL)

    return #result_XLS, result_YLS, result_ZLS, result_XSL, result_YSL, result_ZSL

def ComputeXYZ_FD(params, N, Tobs, dt):
    print("This is the fastgb cal")
    print(params)
    cdef double *XLS = <double *> malloc(N * sizeof(double))
    cdef double *YLS = <double *> malloc(N * sizeof(double))
    cdef double *ZLS = <double *> malloc(N * sizeof(double))
    cdef double *XSL = <double *> malloc(N * sizeof(double))
    cdef double *YSL = <double *> malloc(N * sizeof(double))
    cdef double *ZSL = <double *> malloc(N * sizeof(double))
    #cdef double *XLS = NULL
    #cdef double *YLS = NULL
    #cdef double *ZLS = NULL
    #cdef double *XSL = NULL
    #cdef double *YSL = NULL
    #cdef double *ZSL = NULL

    cdef double f0  = params[0]
    cdef double df0 = params[1]
    cdef double lat = params[2]
    cdef double lng = params[3]
    cdef double Amp = params[4]
    cdef double iota = params[5]
    cdef double psi = params[6]
    cdef double phi0 = params[7]

    print(f0)

    cdef double *c_params = <double *> malloc(len(params) * sizeof(double))

    #for i in range(len(params)):
    #    c_params[i] = params[i]
    c_params[0] = f0 * Tobs
    c_params[1] = np.cos(np.pi/2 - lat)
    c_params[2] = lng
    c_params[3] = np.log(Amp)
    c_params[4] = np.cos(iota)
    c_params[5] = psi
    c_params[6] = phi0
    c_params[7] = df0 * Tobs * Tobs
    #c_params[8] = 11./3 *df0*df0/f0 * Tobs*Tobs*Tobs


    print(c_params[0])

    Fast_GB(c_params, N, Tobs, dt, XLS, YLS, ZLS, XSL, YSL, ZSL, len(params))

    print(N)

    rXLS = np.array([XLS[i] for i in range(N)])
    rYLS = np.array([YLS[i] for i in range(N)])
    rZLS = np.array([ZLS[i] for i in range(N)])
    rXSL = np.array([XSL[i] for i in range(N)])
    rYSL = np.array([YSL[i] for i in range(N)])
    rZSL = np.array([ZSL[i] for i in range(N)])

    print("Done the fast gb calculate")

    #free(c_params)
    #free(XLS)
    #free(YLS)
    #free(ZLS)
    #free(XSL)
    #free(YSL)
    #free(ZSL)

    return (rXLS, rYLS, rZLS, rXSL, rYSL, rZSL)

